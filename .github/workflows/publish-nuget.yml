# .github/workflows/publish-nuget.yml
name: Publish NuGet Package on Tag

# This workflow is triggered when a new tag is pushed that matches the pattern "*-V*.*.*"
# For example: RA.Utilities.OpenApi-V1.0.0 or RA.Utilities.Authorization-V2.1.0-beta
on:
  push:
    tags:
      - '*-V*.*.*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x' # Use the .NET version your project targets

      - name: Parse Tag and Set Environment Variables
        run: |
          # The tag is in the format "PACKAGE_NAME-VVERSION"
          # GITHUB_REF_NAME contains the tag name, e.g., "RA.Utilities.OpenApi-V1.0.0-preview.6.3"
          TAG_NAME="${{ github.ref_name }}"
          
          # Extract the package name (everything before the last "-V")
          PACKAGE_NAME=$(echo "$TAG_NAME" | sed -E 's/(.*)-V.*/\1/')
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV

          # Extract the version (everything after the last "-V")
          PACKAGE_VERSION=$(echo "$TAG_NAME" | sed -E 's/.*-V(.*)/\1/')
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

          # Find the project file path based on the package name
          PROJECT_FILE_PATH=$(find . -type f -name "${PACKAGE_NAME}.csproj")
          echo "PROJECT_FILE_PATH=${PROJECT_FILE_PATH}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore "${{ env.PROJECT_FILE_PATH }}"

      - name: Build and Pack the NuGet Package
        run: |
          # Pack only the target project, overriding its version.
          # We set GeneratePackageOnBuild=false for the restore/build of dependencies to prevent them from being packed.
          dotnet pack "${{ env.PROJECT_FILE_PATH }}" --configuration Release --no-restore -p:GeneratePackageOnBuild=false -p:PackageVersion=${{ env.PACKAGE_VERSION }} -o ./nuget-packages

      - name: Publish to NuGet.org
        run: |
          # Push both the main package and the symbol package. The command automatically finds the .snupkg.
          dotnet nuget push "./nuget-packages/${{ env.PACKAGE_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg" \
            --api-key ${{ secrets.RA_UTILITIES_NUGET_KEY }} \
            --source "https://api.nuget.org/v3/index.json" \
            --skip-duplicate

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The name of the release. This will be the same as the tag, e.g., "RA.Utilities.OpenApi V1.0.0"
          name: ${{ github.ref_name }}
          # The body of the release. You can customize this.
          body: |
            Release for version ${{ env.PACKAGE_VERSION }} of the ${{ env.PACKAGE_NAME }} package.
            View on [NuGet.org](https://www.nuget.org/packages/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_VERSION }})
          # Upload all .nupkg and .snupkg files from the nuget-packages directory as release assets.
          files: ./nuget-packages/*
